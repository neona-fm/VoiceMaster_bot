# main_clean.py ‚Äî –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è VoiceMaster
# –§—É–Ω–∫—Ü–∏–∏: /start, –ø—Ä–∏—ë–º voice/audio, —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —á–µ—Ä–µ–∑ OpenAI,
# –µ—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ –í–ò–î–ï–û ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å —Ç–≤–æ–∏–º —Ç—É—Ç–æ—Ä–∏–∞–ª–æ–º (–∑–∞—à–∏—Ç–æ –≤ –∫–æ–¥–µ).
#
# ENV:
#   TELEGRAM_BOT_TOKEN=...
#   OPENAI_API_KEY=...
#
# –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: aiogram>=3, python-dotenv, openai>=1.37, requests, imageio-ffmpeg

import os
import logging
import asyncio
import requests
import imageio_ffmpeg as ffmpeg_lib

from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest

from openai import AsyncOpenAI
from dotenv import load_dotenv

# -------------------- –ö–æ–Ω—Ñ–∏–≥ --------------------
load_dotenv()

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN") or os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY") or os.getenv("OPENAI_KEY")

if not BOT_TOKEN or not OPENAI_API_KEY:
    raise RuntimeError("–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å TELEGRAM_BOT_TOKEN –∏ OPENAI_API_KEY –≤ .env")

# –†–µ–∫–ª–∞–º–∞ (–∑–∞—à–∏—Ç–æ –≤ –∫–æ–¥–µ): —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–≤–æ–π —É—Ä–æ–∫ –ø–æ –≤—ã—Ä–µ–∑–∞–Ω–∏—é –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ
HOWTO_URL_HARD = "https://t.me/Neona_FM/1224"

# -------------------- Core ----------------------
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
client = AsyncOpenAI(api_key=OPENAI_API_KEY)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("voicemaster-clean")

FFMPEG_PATH = ffmpeg_lib.get_ffmpeg_exe()

def how_to_extract_button() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="ü™Ñ –ö–∞–∫ –≤—ã—Ä–µ–∑–∞—Ç—å –∞—É–¥–∏–æ —Å –≤–∏–¥–µ–æ", url=HOWTO_URL_HARD)]
    ])

# -------------------- OpenAI --------------------
async def transcribe_audio(file_path: str) -> str | None:
    try:
        with open(file_path, "rb") as f:
            res = await client.audio.transcriptions.create(
                model="gpt-4o-mini-transcribe",
                file=f
            )
        return getattr(res, "text", None)
    except Exception as e:
        logger.error(f"OpenAI transcription error: {e}")
        return None

# -------------------- Media flow ----------------
async def handle_media(message: types.Message, file_type: str):
    user_id = message.from_user.id

    # –ï—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ –≤–∏–¥–µ–æ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∏ —É—Ö–æ–¥–∏–º
    if file_type == "video":
        await message.answer(
            "üé¨ –Ø –ø—Ä–∏–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ/–≥–æ–ª–æ—Å–æ–≤—ã–µ.\n"
            "–í—ã—Ä–µ–∂—å—Ç–µ –∑–≤—É–∫ –∏–∑ –≤–∏–¥–µ–æ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∞—É–¥–∏–æ-—Ñ–∞–π–ª.",
            reply_markup=how_to_extract_button()
        )
        return

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    if file_type == "voice":
        file_id = message.voice.file_id
        input_path = f"input_{user_id}.ogg"
    else:
        file_id = message.audio.file_id
        input_path = f"input_{user_id}.bin"

    wait_msg = await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª...")
    output_path = f"output_{user_id}.wav"

    try:
        file_info = await bot.get_file(file_id)
        file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_info.file_path}"
        r = requests.get(file_url, timeout=60)
        r.raise_for_status()
        with open(input_path, "wb") as f:
            f.write(r.content)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV 44.1kHz, stereo
        os.system(
            f'"{FFMPEG_PATH}" -i "{input_path}" '
            f'-vn -acodec pcm_s16le -ar 44100 -ac 2 "{output_path}" '
            f'-y -loglevel quiet'
        )

        text = await transcribe_audio(output_path)

        # –£–¥–∞–ª—è–µ–º "–∂–¥—É" —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=wait_msg.message_id)
        except Exception:
            pass

        if text and text.strip():
            await message.answer(f"üìù –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:\n\n{text}")
        else:
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª.")
    except Exception as e:
        logger.error(f"Media handling error: {e}")
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=wait_msg.message_id)
        except Exception:
            pass
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª.")
    finally:
        for p in (input_path, output_path):
            try:
                if os.path.exists(p):
                    os.remove(p)
            except Exception:
                pass

# -------------------- Handlers ------------------
@dp.message(CommandStart())
async def start_cmd(message: types.Message):
    await message.answer(
        "üéô –ü—Ä–∏–≤–µ—Ç! –Ø –ø–µ—Ä–µ–≤–æ–∂—É –≥–æ–ª–æ—Å–æ–≤—ã–µ –∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –≤ —Ç–µ–∫—Å—Ç.\n"
        "–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ –∞—É–¥–∏–æ –∏–ª–∏ voice-—Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
        "–ï—Å–ª–∏ —É —Ç–µ–±—è –≤–∏–¥–µ–æ ‚Äî —Å–Ω–∞—á–∞–ª–∞ –≤—ã—Ä–µ–∂–∏ –∑–≤—É–∫ –∏ –æ—Ç–ø—Ä–∞–≤—å –∞—É–¥–∏–æ."
    )

@dp.message(lambda m: m.text and m.text.strip().lower() == "/myid")
async def myid_cmd(message: types.Message):
    await message.answer(f"–¢–≤–æ–π Telegram ID: {message.from_user.id}")

@dp.message(lambda m: m.voice)
async def on_voice(message: types.Message):
    await handle_media(message, "voice")

@dp.message(lambda m: m.audio)
async def on_audio(message: types.Message):
    await handle_media(message, "audio")

@dp.message(lambda m: m.video)
async def on_video(message: types.Message):
    await handle_media(message, "video")

# -------------------- Run -----------------------
async def run_bot():
    logging.info("ü§ñ VoiceMaster clean bot started")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(run_bot())
